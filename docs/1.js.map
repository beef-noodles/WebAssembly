{"version":3,"sources":["webpack:///./pkg/index.js"],"names":["WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","cachegetInt32Memory","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","parse","input","len","ptr","mem","offset","code","charCodeAt","slice","subarray","passStringToWasm","memi32","Int32Array","v0","retptr","decode"],"mappings":"yFAAA,wDAEA,IAAIA,EAAkB,EAElBC,EAAoB,IAAIC,YAAY,SAExC,MAAMC,EAAwD,mBAAjCF,EAAkBG,WACzC,SAAUC,EAAKC,GACjB,OAAOL,EAAkBG,WAAWC,EAAKC,IAEvC,SAAUD,EAAKC,GACjB,MAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIM,OACVC,QAASL,EAAII,SAIrB,IAAIE,EAAsB,KAC1B,SAASC,IAIL,OAH4B,OAAxBD,GAAgCA,EAAoBE,SAAW,IAAYA,SAC3EF,EAAsB,IAAIG,WAAW,IAAYD,SAE9CF,EAiCX,IAAII,EAAsB,KAQ1B,IAAIC,EAAoB,IAAIC,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAWpE,SAASC,EAAMC,GAEN,IADG,EAlDnB,SAA0BlB,GAEtB,IAAImB,EAAMnB,EAAIM,OACVc,EAAM,IAAuBD,GAEjC,MAAME,EAAMZ,IAEZ,IAAIa,EAAS,EAEb,KAAOA,EAASH,EAAKG,IAAU,CAC3B,MAAMC,EAAOvB,EAAIwB,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAID,EAAME,GAAUC,EAGxB,GAAID,IAAWH,EAAK,CACD,IAAXG,IACAtB,EAAMA,EAAIyB,MAAMH,IAEpBF,EAAM,IAAwBA,EAAKD,EAAKA,EAAMG,EAAsB,EAAbtB,EAAIM,QAC3D,MAAML,EAAOQ,IAAiBiB,SAASN,EAAME,EAAQF,EAAMD,GAG3DG,GAFYxB,EAAaE,EAAKC,GAEhBM,QAIlB,OADAZ,EAAkB2B,EACXF,EAwBwBO,CAAiBT,GAAQvB,GADxD,MAEMiC,GApBsB,OAAxBhB,GAAgCA,EAAoBF,SAAW,IAAYA,SAC3EE,EAAsB,IAAIiB,WAAW,IAAYnB,SAE9CE,GAkBDkB,GAXiBV,EAWMQ,EAAOG,GAXRZ,EAWyBS,EAAOG,GAVrDlB,EAAkBmB,OAAOvB,IAAiBiB,SAASN,EAAKA,EAAMD,KAUQM,QAXjF,IAA2BL,EAAKD,EAa5B,OADA,IAAqBS,EAAOG,GAA0C,EAAzBH,EAAOG,IAC7CD,EAfXjB,EAAkBmB,U","file":"1.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction passStringToWasm(arg) {\n\n    let len = arg.length;\n    let ptr = wasm.__wbindgen_malloc(len);\n\n    const mem = getUint8Memory();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n* @param {string} input\n* @returns {string}\n*/\nexport function parse(input) {\n    const retptr = 8;\n    const ret = wasm.parse(retptr, passStringToWasm(input), WASM_VECTOR_LEN);\n    const memi32 = getInt32Memory();\n    const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n    return v0;\n}\n\n"],"sourceRoot":""}